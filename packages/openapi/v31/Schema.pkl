/// The Schema Object allows the definition of input and output data types.
/// These types can be objects, but also primitives and arrays. This object is
/// a superset of the [JSON Schema Specification Draft 2020-12](https://spec.openapis.org/oas/v3.1.0.html#bib-json-schema-2020-12).
///
/// For more information about the properties, see [JSON Schema Core](https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00)
/// and [JSON Schema Validation](https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-validation-00).
///
/// Unless stated otherwise, the property definitions follow those of JSON
/// Schema and do not add any additional semantics. Where JSON Schema indicates
/// that behavior is defined by the application (e.g. for annotations), OAS also
/// defers the definition of semantics to the application consuming the OpenAPI
/// document.
///
/// ### Properties
///
/// The OpenAPI Schema Object [dialect](https://tools.ietf.org/html/draft-bhutton-json-schema-00#section-4.3.3)
/// is defined as requiring the [OAS base vocabulary](https://spec.openapis.org/oas/v3.1.0.html#fixed-fields-20),
/// in addition to the vocabularies as specified in the JSON Schema draft
/// 2020-12 [general purpose meta-schema](https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00#section-8).
///
/// The OpenAPI Schema Object dialect for this version of the specification is
/// identified by the URI `https://spec.openapis.org/oas/3.1/dialect/base`
/// (the "OAS dialect schema id").
///
/// The following properties are taken from the JSON Schema specification but
/// their definitions have been extended by the OAS:
///
/// - `description` - CommonMark syntax *MAY* be used for rich text
///   representation.
/// - `format` - See [Data Type Formats](https://spec.openapis.org/oas/v3.1.0.html#dataTypeFormat)
///   for further details. While relying on JSON Schema's defined formats, the
///   OAS offers a few additional predefined formats.
///
/// In addition to the JSON Schema properties comprising the OAS dialect, the
/// [Schema] Object supports keywords from any other vocabularies, or entirely
/// arbitrary properties.
///
/// ### Composition and Inheritance
///
/// The OpenAPI Specification allows combining and extending model definitions
/// using the [allOf] property of JSON Schema, in effect offering model
/// composition. [allOf] takes an array of object definitions that are validated
/// independently but together compose a single object.
///
/// While composition offers model extensibility, it does not imply a hierarchy
/// between the models. To support polymorphism, the OpenAPI Specification adds
/// the [discriminator] field. When used, the [discriminator] will be the name
/// of the property that decides which schema definition validates the structure
/// of the model. As such, the [discriminator] field *MUST* be a required field.
/// There are two ways to define the value of a discriminator for an inheriting
/// instance.
///
/// - Use the schema name.
/// - Override the schema name by overriding the property with a new value. If a
///   new value exists, this takes precedence over the schema name. As such,
///   inline schema definitions, which do not have a given id, cannot be used in
///   polymorphism.
///
/// <https://spec.openapis.org/oas/v3.1.0.html#schema-object>
@ModuleInfo { minPklVersion = "0.26.0" }
module openapi.v31.Schema
extends "@jsonschema/JsonSchema.pkl"

import "Discriminator.pkl"
import "ExternalDocumentation.pkl"
import "XML.pkl"

$schema = "https://json-schema.org/draft/2020-12/schema"

/// Adds support for polymorphism.
///
/// The discriminator is an object name that is used to differentiate between
/// other schemas which may satisfy the payload description. See [Composition and Inheritance](https://spec.openapis.org/oas/v3.1.0.html#composition-and-inheritance-polymorphism)
/// for more details.
discriminator: Discriminator?

/// Adds additional metadata to describe the XML representation of this
/// property.
///
/// This *MAY* be used only on properties schemas. It has no effect on root
/// schemas.
xml: XML?

/// Additional external documentation for this schema.
externalDocs: ExternalDocumentation?

/// A free-form property to include an example of an instance for this schema.
///
/// To represent examples that cannot be naturally represented in JSON or YAML,
/// a string value can be used to contain the example with escaping where
/// necessary.
@Deprecated {
  message =
    """
    The example property has been deprecated in favor of the JSON Schema
    examples keyword.

    Use of example is discouraged, and later versions of this specification may
    remove it.
    """
  replaceWith = "examples"
}
example: Any?

_inline_ {}
