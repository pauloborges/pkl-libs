/// Defines a security scheme that can be used by the operations.
///
/// Supported schemes are HTTP authentication, an API key (either as a header,
/// a cookie parameter or as a query parameter), mutual TLS (use of a client
/// certificate), OAuth2's common flows (implicit, password, client credentials
/// and authorization code) as defined in [RFC6749](https://spec.openapis.org/oas/v3.1.0.html#bib-rfc6749),
/// and [OpenID Connect Discovery](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-discovery-06).
///
/// Please note that as of 2020, the implicit flow is about to be deprecated by
/// [OAuth 2.0 Security Best Current Practice](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics).
/// Recommended for most use case is Authorization Code Grant flow with PKCE.
///
/// <https://spec.openapis.org/oas/v3.1.0.html#security-scheme-object>
@ModuleInfo { minPklVersion = "0.26.0" }
module openapi.v31.SecurityScheme
extends "Extensible.pkl"

import ".../core.pkl"
import "OAuthFlows.pkl"

/// **REQUIRED**.
///
/// The type of the security scheme.
type: Type

/// A description for security scheme.
///
/// CommonMark syntax *MAY* be used for rich text representation.
@SourceCode { language = "Markdown" }
description: core.NonEmptyString?

/// **REQUIRED** when [type] is `"apiKey"`.
///
/// The name of the header, query or cookie parameter to be used.
name: core.NonEmptyString((type == "apiKey").implies(this != null))?

/// **REQUIRED** when [type] is `"apiKey"`.
///
/// The location of the API key.
`in`: APIKeyLocation((type == "apiKey").implies(this != null))?

/// **REQUIRED** when [type] is `"http"`.
///
/// The name of the HTTP Authorization scheme to be used in the `Authorization`
/// header as defined in [RFC7235 Section 5.1](https://datatracker.ietf.org/doc/html/rfc7235#section-5.1).
///
/// The values used *SHOULD* be registered in the
/// [IANA Authentication Scheme registry](https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml).
scheme: core.NonEmptyString((type == "http").implies(this != null))?

/// A hint to the client to identify how the bearer token is formatted.
///
/// Bearer tokens are usually generated by an authorization server, so this
/// information is primarily for documentation purposes.
bearerFormat: core.NonEmptyString?

/// **REQUIRED** when [type] is `"oauth2"`.
///
/// An object containing configuration information for the flow types supported.
flows: OAuthFlows((type == "oauth2").implies(this != null))?

/// **REQUIRED** when [type] is `"openIdConntect"`.
///
/// OpenId Connect URL to discover OAuth2 configuration values.
///
/// This *MUST* be in the form of a URL. The OpenID Connect standard requires
/// the use of TLS.
openIdConnectUrl: Uri((type == "openIdConnect").implies(this != null))?

typealias Type = "apiKey" | "http" | "mutualTLS" | "oauth2" | "openIdConnect"

typealias APIKeyLocation = "query" | "header" | "cookie"
